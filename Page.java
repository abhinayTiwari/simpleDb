package simpledb;

/**
 * {@code Page}s are stored in {@code DbFile}s and may be resident in the {@code BufferPool}.
 * <p>
 * {@code Page}s may be "dirty", indicating that they have been modified since they were last written out to disk.
 *
 * For recovery purposes, {@code Page}s MUST have a single constructor of the form: {@code Page(PageId id, byte[] data)}
 */
public interface Page {

	/**
	 * Returns the id of this {@code Page}. The id is a unique identifier for a {@code Page} that can be used to look up
	 * the {@code Page} on disk or determine if the {@code Page} is resident in the {@code BufferPool}.
	 *
	 * @return the id of this {@code Page}
	 */
	public PageId getId();

	/**
	 * Returns the id of the transaction that last dirtied this {@code Page}, or {@code null} if the {@code Page} is clean.
	 *
	 * @return The id of the transaction that last dirtied this {@code Page}, or {@code null}
	 */
	public TransactionId isDirty();

	/**
	 * Set the dirty state of this {@code Page} as dirtied by a particular transaction
	 */
	public void markDirty(boolean dirty, TransactionId tid);

	/**
	 * Generates a byte array representing the contents of this {@code Page}. Used to serialize this {@code Page} to
	 * disk.
	 * <p>
	 * The invariant here is that it should be possible to pass the byte array generated by this method to the
	 * {@code Page} constructor and have it produce an identical {@code Page} object.
	 *
	 * @return A byte array correspond to the bytes of this {@code Page}.
	 */
	public byte[] getPageData();

	/**
	 * Provides a representation of this {@code Page} before any modifications were made to it. Used by recovery.
	 */
	public Page getBeforeImage();

	/*
	 * Copies the current content of this {@code Page} to the before image of this {@code Page}.
	 */
	public void setBeforeImage();

}
